global.$ = require("jquery");
/**
 * @jest-environment jsdom
 */
import "mutationobserver-shim";
import { fireEvent, screen, waitFor } from "@testing-library/dom";
import BillsUI from "../views/BillsUI.js";
import { bills } from "../fixtures/bills.js";
import { ROUTES_PATH, ROUTES } from "../constants/routes.js";
import { localStorageMock } from "../__mocks__/localStorage.js";
import Bills from "../containers/Bills.js";
import mockStore from "../__mocks__/store.js";
import userEvent from "@testing-library/user-event";
import router from "../app/Router.js";
$.fn.modal = jest.fn(); // Simule la m√©thode modal de jQuery
jest.mock("../app/store", () => mockStore);

describe("Given I am connected as an employee", () => {
  describe("When I am on Bills Page", () => {
    test("Then bill icon in vertical layout should be highlighted", async () => {
      Object.defineProperty(window, "localStorage", {
        value: localStorageMock,
      });
      window.localStorage.setItem(
        "user",
        JSON.stringify({
          type: "Employee",
        })
      );
      const root = document.createElement("div");
      root.setAttribute("id", "root");
      document.body.append(root);
      router();
      window.onNavigate(ROUTES_PATH.Bills);
      await waitFor(() => screen.getByTestId("icon-window"));
      const windowIcon = screen.getByTestId("icon-window");
      //to-do write expect expression
      // ‚úÖ Ajout de l'expect ici
      expect(windowIcon.classList.contains("active-icon")).toBe(true);
    });
    test("Then bills should be ordered from earliest to latest", () => {
      document.body.innerHTML = BillsUI({ data: bills });
      // üî• 1Ô∏è‚É£ R√©cup√®re TOUS les <td> qui ont data-testid="bill-date"
      const dates = screen
        .getAllByTestId("bill-date")
        .map((dateEl) => dateEl.getAttribute("data-date-iso")); // üëà r√©cup√®re la vraie date ISO

      // üî• 2Ô∏è‚É£ Trie du plus r√©cent au plus ancien
      const datesSorted = [...dates].sort((a, b) => new Date(b) - new Date(a));

      // üî• 3Ô∏è‚É£ V√©rifie si l'ordre dans le DOM est d√©j√† tri√©
      expect(dates).toEqual(datesSorted);
    });
    //V√©rifie qu‚Äôun clic sur le bouton "Nouvelle note de frais" appelle bien la m√©thode qui redirige vers la page correspondante.
    test("Then clicking on 'Nouvelle note de frais' should navigate to NewBill page", () => {
      const onNavigate = jest.fn(); // fonction simul√©e
      const billsContainer = new Bills({
        document,
        onNavigate,
        store: null,
        localStorage: window.localStorage,
      });

      document.body.innerHTML = BillsUI({ data: [] }); // page vide pour √©viter d'autres effets
      const buttonNewBill = screen.getByTestId("btn-new-bill");

      // on connecte le bouton √† la m√©thode √† tester
      buttonNewBill.addEventListener(
        "click",
        billsContainer.handleClickNewBill
      );

      // on d√©clenche le clic
      buttonNewBill.click();

      // on v√©rifie qu'on est redirig√© vers NewBill
      expect(onNavigate).toHaveBeenCalledWith(ROUTES_PATH.NewBill);
    });

    test("Then clicking on eye icon should open modal", () => {
      document.body.innerHTML = BillsUI({ data: bills });

      const onNavigate = (pathname) => {
        document.body.innerHTML = ROUTES({ pathname });
      };

      const billsContainer = new Bills({
        document,
        onNavigate,
        store: null,
        localStorage: window.localStorage,
      });

      const eyeIcon = screen.getAllByTestId("icon-eye")[0];
      const mockHandleClickIconEye = jest.fn(billsContainer.handleClickIconEye);

      eyeIcon.addEventListener("click", () => mockHandleClickIconEye(eyeIcon));
      fireEvent.click(eyeIcon);

      expect(mockHandleClickIconEye).toHaveBeenCalled();
    });
    test("Then clicking on eye icon should open modal with the correct image", () => {
      $.fn.modal = jest.fn(); // mock jQuery modal

      document.body.innerHTML = BillsUI({ data: bills });

      const onNavigate = jest.fn();
      const billsContainer = new Bills({
        document,
        onNavigate,
        store: null,
        localStorage: window.localStorage,
      });

      const eyeIcon = screen.getAllByTestId("icon-eye")[0];

      fireEvent.click(eyeIcon);

      // ‚úÖ V√©rifie que la modale est bien affich√©e
      expect($.fn.modal).toHaveBeenCalledWith("show");

      // ‚úÖ V√©rifie que l'image dans la modale a bien le bon src
      const billUrl = eyeIcon.getAttribute("data-bill-url");
      const img = document.querySelector(".bill-proof-container img");
      expect(img).toBeTruthy();
      expect(img.src).toMatch(billUrl);
    });

    test("getBills() should return bills sorted and formatted", async () => {
      const billsContainer = new Bills({
        document,
        onNavigate: jest.fn(),
        store: mockStore,
        localStorage: window.localStorage,
      });

      const bills = await billsContainer.getBills();

      // ‚úÖ V√©rifie qu'on a bien le bon nombre
      expect(bills.length).toBeGreaterThan(0);

      // ‚úÖ V√©rifie que les bills sont bien tri√©es par date descendante
      const rawDates = bills.map((bill) => bill.rawDate);
      const sortedDates = [...rawDates].sort(
        (a, b) => new Date(b) - new Date(a)
      );
      expect(rawDates).toEqual(sortedDates);

      // ‚úÖ V√©rifie que les dates sont bien format√©es
      bills.forEach((bill) => {
        expect(bill.date).not.toBe(bill.rawDate);
      });
    });
    test("should return bills with raw date if formatDate throws an error", async () => {
      const billsWithBadDate = [
        {
          id: "bad-bill",
          date: "date-invalide", // ‚ùå va faire planter formatDate
          status: "pending",
          amount: 100,
          name: "Facture test",
          type: "Transport",
          fileUrl: "test.jpg",
          email: "employe@test.tld",
        },
      ];

      const store = {
        bills: () => ({
          list: () => Promise.resolve(billsWithBadDate),
        }),
      };

      const billsInstance = new Bills({
        document,
        onNavigate: jest.fn(),
        store,
        localStorage: window.localStorage,
      });

      const bills = await billsInstance.getBills();

      expect(bills[0].date).toBe("date-invalide"); // ‚úÖ on est pass√© dans le catch
      expect(bills[0].status).toBe("En attente"); // formatStatus fonctionne
    });
  });
});
// test d'int√©gration GET
describe("Given I am connected as an employee", () => {
  describe("When I navigate to Bills", () => {
    test("fetches bills from mock API GET", async () => {
      // configuration du localStorage pour simuler un utilisateur employ√©
      Object.defineProperty(window, "localStorage", {
        value: localStorageMock,
      });
      window.localStorage.setItem(
        "user",
        JSON.stringify({ type: "Employee", email: "employee@test.tld" })
      );

      // Ajout du root pour le router
      const root = document.createElement("div");
      root.setAttribute("id", "root");
      document.body.append(root);
      router(); // appelle le router pour initialiser la page

      // navigation vers Bills
      window.onNavigate("/bills");

      // attend que la page charge
      await waitFor(() => screen.getByText("Mes notes de frais"));

      // attend que les ic√¥nes "oeil" (d√©tails des notes de frais) soient visibles
      const iconEyes = await screen.findAllByTestId("icon-eye");
      expect(iconEyes).toBeTruthy(); // il y a au moins un oeil visible

      // v√©rifie qu'on a bien re√ßu toutes les factures mock√©es
      const rows = await screen.findAllByTestId("bill-row");
      expect(rows.length).toBe(bills.length); // compare le nombre de lignes re√ßues avec le mock
    });
  });
});
